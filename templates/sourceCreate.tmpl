{{ define "Header" }}

<style type="text/css">
	#editor {
		height: 500px;
	}

	.toolbar {
	}

	.form_group {
		margin-bottom: 15px;
	}

	.preview_nomarkdown {
		width: 100%;
		height: 100%;

		font-size: 2.5em;
		padding: 100px;

		color: #aaaaaa;
	}
</style>

{{ end }}

{{ define "Content" }}

<form id="create_source" role="form" class="form-horizontal" action="/api/program/create/" method="POST" enctype="multipart/form-data">

	<div class="col-md-8 col-md-offset-2">
		<div class="panel panel-primary">
			<div class="panel-heading">
				<h2>新規作成</h2>
			</div>
			<div class="panel-body">
				<div class="form_group">
					<label for="title" class="form-label">1. タイトル</label>
					<input type="text" id="title" class="form-control floating-label" placeholder="タイトルを入力しましょう" data-hint="100文字以内で入力してください" name="title" />
				</div>
	
				<label for="editor" class="form-label">2. ソースコード</label>
				<div class="toolbar btn-toolbar" role="toolbar">
					<div class="btn-group btn-group-sm" role="group">
						<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">ファイル<span class="caret"></span></button>
						<ul class="dropdown-menu" role="menu">
							<li><a href="javascript:open_external();">ファイルをコンピュータから読み込む...</a></li>
							<li><a href="javascript:save_external();">ファイルをコンピュータに保存する...</a></li>
						</ul>
					</div>
					<div class="btn-group btn-group-sm" role="group">
						<button type="button" class="btn btn-default btn-flat" data-toggle="tooltip" data-placement="bottom" title="" data-original-title="実行(F5)" onclick="compile(false);" ><i class="mdi-av-play-arrow"></i></button>
						<button type="button" class="btn btn-default btn-flat" data-toggle="tooltip" data-placement="bottom" title="" data-original-title="文法チェック(F3)" onclick="compile(true);" ><i class="mdi-action-done"></i></button>
						<button type="button" class="btn btn-default btn-flat" data-toggle="tooltip" data-placement="bottom" title="" data-original-title="ヘルプ(F1)"><i class="mdi-action-help"></i></button>
					</div>
				</div>
				<pre id="editor">
#include "hsp3dish.as"
#cmpopt varname 1

	x2=320:y2=480

	screen 0,x2,y2
	title "DEMO"

*main
	redraw 0
	color 0,0,32:boxf
	color 255,255,255:pos 10,24:mes "Hello World!"

	redraw 1
	await 33

	goto *main
				</pre>
				<div id="error" class="alert alert-dissmissable alert-danger" style="display:none;">
					<button type="button" class="close" onclick="dismiss_error();">×</button>
					<div id="error_caption">
					</div>
				</div>

				<label for="description" class="form-label">3. 説明文<span id="description_count" class="small text-muted">0 / 500 文字</span></label>
				<div class="row">
					<div class="col-md-6">
						<textarea id="description" name="description" rows="12" class="form-control floating-label" placeholder="プログラムの説明文を入力しましょう"></textarea>
					</div>
					<div class="col-md-6">
						<div id="preview" class="markdown">
							<div class="preview_nomarkdown">
								<span>プレビュー</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-md-6">
				<div class="form-group">
					<button class="btn btn-default btn-raised form-control" type="reset">キャンセル</button>
				</div>
			</div>
			<div class="col-md-6">
				<div class="form-group">
					<button class="btn btn-success btn-raised form-control" type="submit">投稿</button>
				</div>
			</div>
		</div>

	</div>

</form>

<div id="preview_dialog" class="modal fade" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
				<h4 class="modal-title">プレビュー</h4>
			</div>
			<div class="modal-body">
				<iframe id="preview_frame" src="/static/preview.html" width=640 height=480 border=0 scrolling=no tabindex=1></iframe>
			</div>
			<div class="modal-footer">
				<button class="btn btn-default" data-dismiss="modal">閉じる</button>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">

var Module = {
	preRun: [],
	postRun: [],
	print: (function() {
		/*var element = document.getElementById('output');
		if (element) element.value = ''; // clear browser cache
		return function(text) {
			text = Array.prototype.slice.call(arguments).join(' ');
			console.log(text);
			if (element) {
				element.value += text + "\n";
				element.scrollTop = element.scrollHeight; // focus on bottom
			}
		};*/
	})(),
	printErr: function(text) {
		text = Array.prototype.slice.call(arguments).join(' ');
		if (0) { // XXX disabled for safety typeof dump == 'function') {
			dump(text + '\n'); // fast, straight to the real console
		} else {
			console.error(text);
		}
	},
	canvas: {},
	setStatus: function(text) {
		/*if (!Module.setStatus.last) Module.setStatus.last = { time: Date.now(), text: '' };
		if (text === Module.setStatus.text) return;
		var m = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
		var now = Date.now();
		if (m && now - Date.now() < 30) return; // if this is a progress update, skip it if too soon
		if (m) {
			text = m[1];
			progressElement.value = parseInt(m[2])*100;
			progressElement.max = parseInt(m[4])*100;
			progressElement.hidden = false;
			spinnerElement.hidden = false;
		} else {
			progressElement.value = null;
			progressElement.max = null;
			progressElement.hidden = true;
			if (!text) spinnerElement.style.display = 'none';
		}
		statusElement.innerHTML = text;*/
	},
	totalDependencies: 0,
	monitorRunDependencies: function(left) {
		/*this.totalDependencies = Math.max(this.totalDependencies, left);
		Module.setStatus(left ? 'Preparing... (' + (this.totalDependencies-left) + '/' + this.totalDependencies + ')' : 'All downloads complete.');*/
	}
};

</script>

{{ linkJS "ace.js" }}
{{ linkJS "ext-language_tools.js" }}
{{ linkJS "theme-monokai.js" }}
{{ linkJS "hspcmp.js" }}

<script type="text/javascript">

	var editor;

	function compile(validateOnly) {
		console.log("Compile:");

		var fname = "source.hsp";

		var code = editor.getValue();
		var codeArray = Module.intArrayFromString(code);

		var f = FS.open(fname, "w");
		FS.write(f, codeArray, 0, codeArray.length, 0);
		FS.close(f);

		var fnameArray = Module.intArrayFromString(fname);
		var fnamePtr = Module._malloc(fnameArray.length);
		Module.writeArrayToMemory(fnameArray, fnamePtr);

		Module.ccall('hsc_ini', 'number', ['number', 'number', 'number', 'number'],
											[0, fnamePtr, 0, 0]);

		var option = 4;
		option |= validateOnly ? 2 : 0;
		var stat = Module.ccall('hsc_comp', 'number', ['number', 'number', 'number', 'number'],
													[0, option, 0, 0]);
		console.log("Initialized with " + option);
		console.log("Compile result: " + stat);

		var mesPtr = Module._malloc(0x1000);
		Module.ccall('hsc_getmes', 'number', ['number', 'number', 'number', 'number'],
											[mesPtr, 0, 0, 0]);

		var message = Module.Pointer_stringify(mesPtr);
		var lines = message.split("\n");

		// エラー行チェック
		for (var i = 0; i < lines.length; i++) {
			var err = lines[i].match(/\.hsp\(([0-9]+)\) : error /);
			if (err && err[1]) {
				var lineno = +err[1];
				editor.gotoLine(lineno);
				editor.session.clearAnnotations();
				editor.session.setAnnotations([{
					row:lineno - 1 ,column: 0,
					text: lines[i], type:"error"}]); 
			}
		}

		console.log(message);

		Module._free(fnamePtr);
		Module._free(mesPtr);

		if (stat == 0) {
			dismiss_error();

			if (!validateOnly) {
				run();
			}
			assertBottom("success", "正常にコンパイルできました。");
		} else {
			$("#error_caption").html(message.replace(/\n/g, "<br />"));
			$("#error").show(500);
			assertBottom("error", "エラーが発生しています。");
		}
	}

	function run() {
		var data = FS.readFile('source.ax');

		$("#preview_dialog").modal({
			keyboard: false,
		});

		var frame = $("#preview_frame")[0];

		frame.onload = function() {
			frame.contentWindow["run"](data, "5000");
		};
		frame.contentWindow.location.reload();
	}

	function open_external() {
	
	}

	function save_external() {
	
	}

	function updatePreview() {
		$.ajax({
			type: "GET",
			url: "/api/markdown/",
			dataType: "json",
			data: { text: $("#description").val() },
			success: function (json) {
				$("#preview").html(json["Markdown"]);
			}
		});
	}

	function dismiss_error() {
		$("#error").hide(500);
	}

	$(document).ready(function () {
		ace.require("ace/ext/language_tools");

		editor = ace.edit("editor");
		editor.setOptions({
			enableBasicAutocompletion: true,
			highlightActiveLine: true,
			highlightGutterLine: true,
			animatedScroll: true,
			showInvisibles: true,
			showLineNumbers: true,
			showGutter: true,
			displayIndentGuides: true,
			useSoftTabs: false,
		});
		editor.setTheme("ace/theme/monokai");
		editor.getSession().setMode("ace/mode/hsp");

		$("#description").bind('input propertychange', function() {
			updatePreview();

			$("#description_count").text(String($(this).val().length) + " / 500 文字");
		});

	});
</script>

{{ end }}
