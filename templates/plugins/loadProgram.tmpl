var critical = false;

// emscripten Module
var Module = {
	
	preRun: [],
	postRun: [],
	print:  (function() {
		return function(text) {
			text = Array.prototype.slice.call(arguments).join(' ');
			console.log(text);

			if ((text.indexOf("#Error") == 0) || (critical)) {
				$("#errors").show().append(text+'<br />')

				critical = true;
			}
		};
	})(),
	printErr: function(text) {
		text = Array.prototype.slice.call(arguments).join(' ');
		console.error(text);
		//assertBottom("error", "HSPエラー:"+text)
	},
	canvas: document.getElementById('screen'),
	setStatus: function(text){
		console.log(text);
	},
	totalDependencies: 0,
	monitorRunDependencies: function(){},
	arguments: ["/startax"]
};
console.log('ダウンロード中...');

var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
	Module.expectedDataFileDownloads = 0;
	Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;


// データの登録
function DataRequest(audio) {
	this.audio = audio;
}

DataRequest.prototype = {
	//TOTAL_MEMORY: 104857600,
	requests: {},
	register: function(name, arrayBuffer) {
		this.name = name;

		this.arrayBuffer = arrayBuffer;

		DataRequest.prototype.requests[name] = this;

		console.log("Registered "+this.name+" heapSize:"+DataRequest.prototype.heapSize);

		Module['addRunDependency']('fp ' + this.name);
	},
	process: function() {
		var sourceBytes = new Uint8Array(this.arrayBuffer);

		var heapPtr = Module['_malloc'](sourceBytes.length);
		Module['HEAPU8'].set(sourceBytes, heapPtr);

		var byteArray = Module['HEAPU8'].subarray(heapPtr, heapPtr + this.arrayBuffer.byteLength);

		var that = this;
		Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
			Module['removeRunDependency']('fp ' + that.name);
		}, function() {
			if (that.audio) {
				Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
			} else {
				Module.printErr('Preloading file ' + that.name + ' failed');
			}
		}, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
	},
};


// ダウンロードするリスト
var fileNames = ["startax"];

function importDataList() {
	var defer = $.Deferred();

	$.ajax({
		type: "GET",
		url:  "/api/program/data_list/",
		data: {
			"p": pid
		},
		dataType: "json"
	}).success(function(data) {

		if (data.Names != null) {
			fileNames = fileNames.concat(data.Names);
		}

		console.log("Downloaded file list.");

		defer.resolve();
	}).error(function(data) {
		console.log("Failed to download file list.")

		defer.reject();
	});

	return defer.promise();
}

function importDataArray(name) {
	var defer = $.Deferred();

	var xhr = new XMLHttpRequest();
	xhr.open('GET', '/api/program/data/?p='+pid+'&f=' + name, true);
	xhr.responseType = 'arraybuffer';
	
	xhr.onload = function(e) {
		if (this.status == 200) {
			new DataRequest(0).register("/" + name, this.response);

			console.log("Downloaded " + name);

			defer.resolve();
		} else {
			defer.reject();
		}

	};
	
	xhr.send();

	return defer.promise();
}

function importDataArrays() {
	var defer = $.Deferred();
	var processingNum = fileNames.length;

	$.each(fileNames, function (i, name) {
		importDataArray(name).then(function () {
			processingNum--;
			if (processingNum == 0) {
				defer.resolve();
			}
		}, function () {
			defer.reject();
		});
	});

	return defer.promise();
}

// この時点で初期化されていれば、runWithFS
// されていなければpreRunに追加
if (Module['calledRun']) {
	runWithFS();
} else {
	if (!Module['preRun']) Module['preRun'] = [];
	Module["preRun"].push(runWithFS);
}


// 初期化後の読み込み
function runWithFS() {

	// HSPの設定
	Module.preRun.push(function() {
		ENV.HSP_WX = "640";//スクリプトの動作解像度
		ENV.HSP_WY = "480";
		ENV.HSP_SX = "640";//表示解像度
		ENV.HSP_SY = "480";
		ENV.HSP_AUTOSCALE = "0";//スケーリングモード
		ENV.HSP_FPS = "0";//フレームレート
		ENV.HSP_LIMIT_STEP = steps;//ブラウザに処理を返すまでの実行ステップ数
	});
	
	function processPackageData() {
		console.log('Processing package data...')

		Module.finishedDataFileDownloads++;

		$.each(fileNames, function (i, name) {
			DataRequest.prototype.requests["/" + name].process();
			DataRequest.prototype.requests["/" + name] = null;
		});

		Module['removeRunDependency']('datafile_data');

	};

	
	Module['addRunDependency']('datafile_data');

	if (!Module.preloadResults) Module.preloadResults = {};

	Module.preloadResults["data"] = {fromCache: false};

	importDataList().then(function() {
		importDataArrays().then(function () {

			processPackageData();

		});
	});

}
