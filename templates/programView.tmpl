{{ define "Header" }}
{{ .LinkJS "twitter-entities.js" }}
{{ .LinkJS "flickity.pkgd.js" }}
{{ .LinkCSS "flickity.css" }}

<style type="text/css">

.title_heading {
	position: relative;
}

.share_buttons {
	position: absolute;

	top: auto;
	bottom: 0;
	right:  0;

	text-align: right;
}

.played_number, .good_number {
	font-size: 1.5em;
}

.played_number i, .good_number i {
	font-size: 1.6em;
}

.good_number a {
	display: inline-block;
	text-shadow: 0 0 5px #aaaaaa;
}
.good_number a:hover {
	text-decoration: none;
}
.good_button_animate {
	transition: all 1s ease;
	-webkit-transition: all 1s ease;

	transform: rotate(360deg);
	-webkit-transform: rotate(360deg);
}
.container_box {
	width: 1000px;
}
.screen_box {
	width: 640px;
	height: 500px;
}
.comments {
	position: relative;

	width: 340px;
	height: 480px;

	margin-left: 5px;

	font-size: 1.2em;

}

.description {
	width: 640px;

	font-size: 1.2em;
}
.user_box {
}
.user_title {
	font-size: 1.2em;

	color: #666666;
}
.user {
	width: 300px;
	/*height: 180px;*/

	padding: 10px;

	background: #efefef;
}

#tweets {
	height: 100%;

	overflow-x: hidden;
	overflow-y: scroll;

	background: #eeeeee;
}
#tweets .text {
	font-size: 0.8em;
}
#tweets .name {
	font-size: 0.7em;
}
.share_box {
	position: absolute;

	bottom: 0;
	left: 0;
	right: 0;

	padding: 0 5px 0 5px;
	margin-bottom: -20px !important;

	background: #ffffff;
}
.gallery_box {
	height: 200px;
}
.gallery {
	height: 150px;
}
.gallery_cell {
	width: 200px;
	height: 150px;
	margin-left: 10px;
}
.user_detail_link {
	position: absolute;

	bottom: 0;
	right: 10px;
}
.user .row-content {
	position: relative;
}
</style>
{{ end }}

{{ define "Content" }}

<div class="container_box center-block">
	<div class="row">
		<div class="panel panel-default">
			<div class="panel-heading">
				<div class="title_heading row">
					<div class="title col-md-6">
						<h1>{{ .ProgramInfo.Title }}</h1>
						<span class="cap"> by <a href="/user/view/?u={{ .ProgramInfo.User }}">{{ .ProgramInfo.User }}</a>, at {{ .ProgramInfo.Created.Format "Jan _2 3:04:05 PM (Mon)" }}</span>
					</div>
					<div class="share_buttons col-md-6">
						<span class="played_number"><i class="mdi-av-play-circle-outline"></i>12345</span> 
						<span class="good_number">
							<a href="javascript:good();" class="good_button" ><i class="mdi-social-mood"></i></a>
							<span id="good">{{ .ProgramInfo.Good }}</span>
						</span>
					</div>
				</div>
			</div>
			<div class="panel-body">
				<div class="screen_box pull-left">
					<canvas id="screen" width=640 height=480></canvas>
					<p>powered by <a href="http://hsp.tv/make/hsp3dish.html" target="_blank">hsp3dish.js</a> / OpenHSP</p>
				</div>
				<div class="comments pull-right">
					<i class="mdi-communication-comment"></i>コメント<br />
					<div id="tweets" class="list-group">

					</div>
					<div class="share_box shadow-z-1">
						<div class="form-group">
							<input class="form-control floating-label" id="comment_input" type="text" placeholder="Twitterを使ってコメントする...">
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	
	<div class="row">
		<div class="panel panel-default">
			<div class="panel-heading">
				<b>説明</b>
			</div>
			<div class="panel-body">
				<div class="description pull-left">
					{{ .ProgramInfo.Description }}
				</div>
				<div class="user_box pull-right">
					<span class="user_title"><i class="mdi-action-face-unlock"></i>作成者</span>
					<div class="user shadow-z-2">
						<div class="list-group">
							<div class="list-group-item">
								<div class="row-picture">
									<img id="profile_icon" class="circle" alt="icon">
								</div>
								<div class="row-content">
									<h4 class="list-group-item-heading"><a href="https://twitter.com/{{ .ProgramInfo.User }}">@{{ .ProgramInfo.User }}</a></h4>
									<p id="profile" class="list-group-item-text">ここはユーザの紹介文</p>
									<a class="user_detail_link" href="/user/view/?u={{ .ProgramInfo.User }}">詳しく...</a>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<br /><br />

	<div class="row">
		<div class="panel panel-default">
			<div class="panel-heading">
				<b>関連プログラム</b>
			</div>
			<div class="gallery_box panel-body">
				<div class="gallery" id="gallery">
					<div class="gallery-cell" style="background: #353;">
						<span>プログラム</span>
					</div>
				</div>
			</div>
		</div>
	</div>

</div>

<script type="text/javascript">
	function good() {
		$(".good_button").addClass("good_button_animate");
		setTimeout(function() {
			$(".good_button").removeClass("good_button_animate");
		}, 1000);

		$.ajax({
			type: "POST",
			url:  "/api/program/good/",
			data: {
				"pid": "{{ .ProgramInfo.Id }}"
			}
		}).success(function(data) {
			$("#good").text(1 + Number($("#good").text()));
			$(".good_button").attr("href", "#");
		}).error(function(data) {
			assertBottom("error", data.responseJSON.Message);
		});
	}

	function parseTwitterDate(tdate) {
		var system_date = new Date(Date.parse(tdate));
		var user_date = new Date();
		if (K.ie) {
			system_date = Date.parse(tdate.replace(/( \+)/, ' UTC$1'))
		}
		var diff = Math.floor((user_date - system_date) / 1000);
		if (diff <= 1) {return "just now";}
		if (diff < 20) {return diff + " seconds ago";}
		if (diff < 40) {return "half a minute ago";}
		if (diff < 60) {return "less than a minute ago";}
		if (diff <= 90) {return "one minute ago";}
		if (diff <= 3540) {return Math.round(diff / 60) + " minutes ago";}
		if (diff <= 5400) {return "1 hour ago";}
		if (diff <= 86400) {return Math.round(diff / 3600) + " hours ago";}
		if (diff <= 129600) {return "1 day ago";}
		if (diff < 604800) {return Math.round(diff / 86400) + " days ago";}
		if (diff <= 777600) {return "1 week ago";}
		return "on " + system_date;
	}
	
	// from http://widgets.twimg.com/j/1/widget.js
	var K = function () {
		var a = navigator.userAgent;
		return {
			ie: a.match(/MSIE\s([^;]*)/)
		}
	}();	

	var max_id = 1;

	function reloadComments() {
		$.ajax({
			url: "/api/twitter/search/",
			type: "GET",
			dataType: "json",
			cache: false,
			data: {
				"pn": "{{ .ProgramInfo.Title }}",
				"n": 10,
				"o": max_id
			}
		}).success(function (data, status) {
			var tweets = $("<div />");

			$.each(data.Tweets.statuses, function (i, stat) {
				var tweet = $("<div />").addClass("tweet").addClass("list-group-item");
				var iconbox = $("<div />").addClass("row-picture");
				var icon = $("<img />").attr("src", stat.user.profile_image_url).attr("alt", stat.user.name).addClass("circle");
				var contents = $("<div />").addClass("row-content");
				var least = $("<div />").addClass("least-content").text(parseTwitterDate(stat.created_at));
				var name = $("<h4 />").addClass("list-group-item-heading").append($("<a />").attr("href", "https://twitter.com/"+stat.user.name).text(stat.user.screen_name).addClass("name"));
				var text = $("<p />").addClass("text list-group-item-text").html(linkify_entities(stat));
				iconbox.append(icon);
				tweet.append(iconbox);
				contents.append(name).append(text).append(least);
				tweet.append(contents);
				tweets.append(tweet).append($("<div />").addClass("list-group-separator"));
			});

			$("#tweets").prepend(tweets.html());

			max_id = data.Tweets.search_metadata.max_id;
		}).error( function (data, status, error) {
		});

	}

	function setProfile() {
		$.ajax({
			url: "/api/user/info/",
			type: "GET",
			dataType: "json",
			cache: false,
			data: {
				"u": "{{ .ProgramInfo.UserId }}"
			},
		}).success(function (data, status) {
			$("#profile").text(data.Profile.substring(0, 50) + "...");
			$("#profile_icon").attr("src", data.IconURL);
		}).error(function (data, status, error) {
		});
	}

	function openTwitter(that) {

		var title = encodeURIComponent("{{ .ProgramInfo.Title }}");
		var hashtags = encodeURIComponent("hsproom #{{ .ProgramInfo.Title }}");
		var url = encodeURIComponent(location.href);

		open("https://twitter.com/intent/tweet?text="+title+"&amp;amp;url="+url+"&amp;amp;hashtags=" + hashtags, "プログラムにコメントする", "width=600,height=331");

		$(that).blur();

	}

	$(document).ready(function() {
		reloadComments();
		setProfile();

		setInterval(reloadComments, 15000);

		$("#comment_input").focus(openTwitter($("#comment_input")));

		$("#gallery").flickity({
			cellAlign: "left",
			contain: true
		});
	});

</script>

<script type="text/javascript">

	var Module = {
		
		preRun: [],
		postRun: [],
		print:  (function() {
			return function(text) {
				text = Array.prototype.slice.call(arguments).join(' ');
				console.log(text);
			};
		})(),
		printErr: function(text) {
			text = Array.prototype.slice.call(arguments).join(' ');
			console.error(text);
			assert("error", "HSPエラー:"+text)
		},
		canvas: document.getElementById('screen'),
		setStatus: function(){}/* function(text) {
			if (!Module.setStatus.last) Module.setStatus.last = { time: Date.now(), text: '' };
			if (text === Module.setStatus.text) return;
			var m = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
			var now = Date.now();
			if (m && now - Date.now() < 30) return; // if this is a progress update, skip it if too soon
			if (m) {
				text = m[1];
				progressElement.value = parseInt(m[2])*100;
				progressElement.max = parseInt(m[4])*100;
				progressElement.hidden = false;
				spinnerElement.hidden = false;
			} else {
				progressElement.value = null;
				progressElement.max = null;
				progressElement.hidden = true;
				if (!text) spinnerElement.style.display = 'none';
			}
			statusElement.innerHTML = text;
		}*/,
		totalDependencies: 0,
		monitorRunDependencies: function(){},
		arguments: ["startax"]
	};
	//Module.setStatus('Downloading...');
	console.log('Downloading...');

	var Module;
	if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
	if (!Module.expectedDataFileDownloads) {
		Module.expectedDataFileDownloads = 0;
		Module.finishedDataFileDownloads = 0;
	}
	Module.expectedDataFileDownloads++;
	

	(function() {

		var PACKAGE_NAME = 'data';
		var REMOTE_PACKAGE_NAME = '/api/program/data/?pid={{ .ProgramInfo.Id }}&f=startax';
		var PACKAGE_UUID = '51f84d03-0c74-4552-ac13-924e79e76977';
	
		function fetchRemotePackage(packageName, callback, errback) {

			var xhr = new XMLHttpRequest();
			xhr.open('GET', packageName, true);
			xhr.responseType = 'arraybuffer';

			xhr.onprogress = function(event) {
				var url = packageName;

				if (event.loaded) {

					if (Module['setStatus']) Module['setStatus']('Downloading data... (' + event.loaded + '/' + event.total + ')');
				}
			};

			xhr.onload = function(event) {
				var packageData = xhr.response;
				callback(packageData);
			};

			xhr.send(null);
		};

		function handleError(error) {
			console.error('package error:', error);
		};
	
		var fetched = null, fetchedCallback = null;
		fetchRemotePackage(REMOTE_PACKAGE_NAME, function(data) {
			if (fetchedCallback) {
				fetchedCallback(data);
				fetchedCallback = null;
			} else {
				fetched = data;
			}
		}, handleError);
	
		function runWithFS() {

			function assert(check, msg) {
				if (!check) throw msg + new Error().stack;
			}

			function DataRequest(start, end, crunched, audio) {
				this.start = start;
				this.end = end;
				this.crunched = crunched;
				this.audio = audio;
			}

			DataRequest.prototype = {
				requests: {},
				open: function(mode, name) {
					this.name = name;
					this.requests[name] = this;
					Module['addRunDependency']('fp ' + this.name);
				},
				send: function() {},
				onload: function() {
					var byteArray = this.byteArray.subarray(this.start, this.end);
	
					this.finish(byteArray);
	
				},
				finish: function(byteArray) {
					var that = this;
					Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
						Module['removeRunDependency']('fp ' + that.name);
					}, function() {
						if (that.audio) {
							Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
						} else {
							Module.printErr('Preloading file ' + that.name + ' failed');
						}
					}, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
					this.requests[this.name] = null;
				},
			};
	
			Module.preRun.push(function() {
				ENV.HSP_WX = "640";//スクリプトの動作解像度
				ENV.HSP_WY = "480";
				ENV.HSP_SX = "640";//表示解像度
				ENV.HSP_SY = "480";
				ENV.HSP_AUTOSCALE = "0";//スケーリングモード
				ENV.HSP_FPS = "0";//フレームレート
				ENV.HSP_LIMIT_STEP = "5000";//ブラウザに処理を返すまでの実行ステップ数
			});

			new DataRequest(0, {{ .ProgramInfo.Size }}, 0, 0).open('GET', '/startax');


			function processPackageData(arrayBuffer) {
				console.log('Processing package data...')

				Module.finishedDataFileDownloads++;
				assert(arrayBuffer, 'Loading data file failed.');
				var byteArray = new Uint8Array(arrayBuffer);
				var curr;
			
				// copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
				var ptr = Module['_malloc'](byteArray.length);
				Module['HEAPU8'].set(byteArray, ptr);
				DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);

				DataRequest.prototype.requests["/startax"].onload();

				Module['removeRunDependency']('datafile_data');

			};

			Module['addRunDependency']('datafile_data');
	
			if (!Module.preloadResults) Module.preloadResults = {};
	
			Module.preloadResults[PACKAGE_NAME] = {fromCache: false};

			if (fetched) {
				processPackageData(fetched);
				fetched = null;
			} else {
				fetchedCallback = processPackageData;
			}

		}

		if (Module['calledRun']) {
			runWithFS();
		} else {
			if (!Module['preRun']) Module['preRun'] = [];
			Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
		}
	})();
</script>

{{ .LinkJS "hsp3dish.js" }}

{{ end }}
