{{ define "Header" }}
{{ linkJS "twitter-entities.js" }}
{{ linkJS "flickity.pkgd.js" }}
{{ linkCSS "flickity.css" }}

<style type="text/css">

.title_heading {
	position: relative;
}

.share_buttons {
	position: absolute;

	top: auto;
	bottom: 0;
	right:  0;

	text-align: right;
}

.played_number, .good_number {
	font-size: 1.5em;
}

.played_number i, .good_number i {
	font-size: 1.6em;
}

.good_number a {
	display: inline-block;
	text-shadow: 0 0 5px #aaaaaa;
}
.good_number a:hover {
	text-decoration: none;
}
.good_button_animate {
	transition: all 1s ease;
	-webkit-transition: all 1s ease;

	transform: rotate(360deg);
	-webkit-transform: rotate(360deg);
}
.container_box {
	width: 1000px;
}
.screen_box {
	width: 640px;
	height: 500px;
}
.comments {
	position: relative;

	width: 340px;
	height: 480px;

	margin-left: 5px;

	font-size: 1.2em;

}

.description {
	width: 640px;

	font-size: 1.2em;
}
.user_box {
}
.user_title {
	font-size: 1.2em;

	color: #666666;
}
.user {
	width: 300px;
	/*height: 180px;*/

	padding: 10px;

	background: #efefef;
}

#tweets {
	height: 100%;

	overflow-x: hidden;
	overflow-y: scroll;

	background: #eeeeee;
}
#tweets .text {
	font-size: 0.8em;
}
#tweets .name {
	font-size: 0.7em;
}
.share_box {
	position: absolute;

	bottom: 0;
	left: 0;
	right: 0;

	margin-bottom: -30px !important;

	background: #ffffff;
}
.share_box a {
	margin: 0;

	border-bottom: 3px solid #dddddd;

	background: #ffffff;

	cursor: text;
}
.share_box a:hover {
	border-bottom: 3px solid #00a194;
}
.gallery_box {
	height: 200px;
}
.gallery {
	height: 150px;
}
.gallery_cell {
	width: 200px;
	height: 150px;
	margin-left: 10px;
}
.user_detail_link {
	position: absolute;

	bottom: 0;
	right: 10px;
}
.user .row-content {
	position: relative;
}
</style>
{{ end }}

{{ define "Content" }}

<div class="container_box center-block">
	<div class="row">
		<div class="panel panel-default">
			<div class="panel-heading">
				<div class="title_heading row">
					<div class="title col-md-6">
						<h1>{{ .ProgramInfo.Title }}</h1>
						<span class="cap"> by <a href="/user/view/?u={{ .ProgramInfo.User }}">{{ .ProgramInfo.User }}</a>, at {{ .ProgramInfo.Created.Format "Jan _2 3:04:05 PM (Mon)" }}</span>
					</div>
					<div class="share_buttons col-md-6">
						<span class="played_number"><i class="mdi-av-play-circle-outline"></i>{{ .ProgramInfo.Play }}</span> 
						<span class="good_number">
							<a href="javascript:good();" class="good_button" ><i class="mdi-social-mood"></i></a>
							<span id="good"></span>
						</span>
					</div>
				</div>
			</div>
			<div class="panel-body">
				<div class="screen_box pull-left">
					<canvas id="screen" width=640 height=480></canvas>
					<p>powered by <a href="http://hsp.tv/make/hsp3dish.html" target="_blank">hsp3dish.js</a> / OpenHSP</p>
				</div>
				<div class="comments pull-right">
					<i class="mdi-communication-comment"></i>コメント<br />
					<div id="tweets" class="list-group">

					</div>
					<div class="share_box">
						<a class="btn btn-default btn-block" href="javascript:openTwitter();">Twitterを使ってコメントする…</a>
					</div>
				</div>
			</div>
		</div>
	</div>
	
	<div class="row">
		<div class="panel panel-default">
			<div class="panel-heading">
				<b>説明</b>
			</div>
			<div class="panel-body">
				<div class="description pull-left">
					{{ markdown .ProgramInfo.Description }}
				</div>
				<div class="user_box pull-right">
					<span class="user_title"><i class="mdi-action-face-unlock"></i>作成者</span>
					<div class="user shadow-z-2">
						<div class="list-group">
							<div class="list-group-item">
								<div class="row-picture">
									<img id="profile_icon" class="circle" alt="icon">
								</div>
								<div class="row-content">
									<h4 class="list-group-item-heading"><a href="https://twitter.com/{{ .ProgramInfo.User }}">@{{ .ProgramInfo.User }}</a></h4>
									<p id="profile" class="list-group-item-text">ここはユーザの紹介文</p>
									<a class="user_detail_link" href="/user/view/?u={{ .ProgramInfo.User }}">詳しく...</a>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<br /><br />

	<div class="row">
		<div class="panel panel-default">
			<div class="panel-heading">
				<b>関連プログラム</b>
			</div>
			<div class="gallery_box panel-body">
				<div class="gallery" id="gallery">
					<div class="gallery-cell" style="background: #353;">
						<span>プログラム</span>
					</div>
				</div>
			</div>
		</div>
	</div>

</div>

<script type="text/javascript">
	function good() {
		$(".good_button").addClass("good_button_animate");
		setTimeout(function() {
			$(".good_button").removeClass("good_button_animate");
		}, 1000);

		$.ajax({
			type: "POST",
			url:  "/api/program/good/",
			dataType: "json",
			data: {
				"pid": "{{ .ProgramInfo.Id }}"
			}
		}).success(function(data) {
			$(".good_button").attr("href", "#");
			updateGoodCount();
			assertBottom("success", "いいね!しました。");
		}).error(function(data) {
			assertBottom("error", data.responseJSON.Message);
		});
	}

	function parseTwitterDate(tdate) {
		var system_date = new Date(Date.parse(tdate));
		var user_date = new Date();
		if (K.ie) {
			system_date = Date.parse(tdate.replace(/( \+)/, ' UTC$1'))
		}
		var diff = Math.floor((user_date - system_date) / 1000);
		if (diff <= 1) {return "just now";}
		if (diff < 20) {return diff + " seconds ago";}
		if (diff < 40) {return "half a minute ago";}
		if (diff < 60) {return "less than a minute ago";}
		if (diff <= 90) {return "one minute ago";}
		if (diff <= 3540) {return Math.round(diff / 60) + " minutes ago";}
		if (diff <= 5400) {return "1 hour ago";}
		if (diff <= 86400) {return Math.round(diff / 3600) + " hours ago";}
		if (diff <= 129600) {return "1 day ago";}
		if (diff < 604800) {return Math.round(diff / 86400) + " days ago";}
		if (diff <= 777600) {return "1 week ago";}
		return "on " + system_date;
	}
	
	// from http://widgets.twimg.com/j/1/widget.js
	var K = function () {
		var a = navigator.userAgent;
		return {
			ie: a.match(/MSIE\s([^;]*)/)
		}
	}();	

	var max_id = 1;

	function reloadComments() {
		$.ajax({
			url: "/api/twitter/search/",
			type: "GET",
			dataType: "json",
			cache: false,
			data: {
				"pn": "{{ .ProgramInfo.Title }}",
				"n": 10,
				"o": max_id
			}
		}).success(function (data, status) {
			var tweets = $("<div />");

			$.each(data.Tweets.statuses, function (i, stat) {
				var tweet = $("<div />").addClass("tweet").addClass("list-group-item");
				var iconbox = $("<div />").addClass("row-picture");
				var icon = $("<img />").attr("src", stat.user.profile_image_url).attr("alt", stat.user.name).addClass("circle");
				var contents = $("<div />").addClass("row-content");
				var least = $("<div />").addClass("least-content").text(parseTwitterDate(stat.created_at));
				var name = $("<h4 />").addClass("list-group-item-heading").append($("<a />").attr("href", "https://twitter.com/"+stat.user.name).text(stat.user.screen_name).addClass("name"));
				var text = $("<p />").addClass("text list-group-item-text").html(linkify_entities(stat));
				iconbox.append(icon);
				tweet.append(iconbox);
				contents.append(name).append(text).append(least);
				tweet.append(contents);
				tweets.append(tweet).append($("<div />").addClass("list-group-separator"));
			});

			$("#tweets").prepend(tweets.html());

			max_id = data.Tweets.search_metadata.max_id;
		}).error( function (data, status, error) {
		});

	}

	function setProfile() {
		$.ajax({
			url: "/api/user/info/",
			type: "GET",
			dataType: "json",
			cache: false,
			data: {
				"u": "{{ .ProgramInfo.UserId }}"
			},
		}).success(function (data, status) {
			$("#profile").text(data.Profile.substring(0, 50) + "...");
			$("#profile_icon").attr("src", data.IconURL);
		}).error(function (data, status, error) {
		});
	}

	function openTwitter() {

		var title = encodeURIComponent("{{ .ProgramInfo.Title }}");
		var hashtags = encodeURIComponent("hsproom #{{ .ProgramInfo.Title }}");
		var url = encodeURIComponent(location.href);

		open("https://twitter.com/intent/tweet?text="+title+"&amp;amp;url="+url+"&amp;amp;hashtags=" + hashtags, "プログラムにコメントする", "width=600,height=331");

	}

	function updateGoodCount() {
	
		$.ajax({
			type: "GET",
			dataType: "json",
			url: "/api/program/good/count/",
			data: {
				"p": {{ .ProgramInfo.Id }}
			}
		}).success(function (data) {
			$("#good").text(data.GoodCount);
		}).error(function (data) {
			assertBottom("いいね数の取得に失敗しました。");
		});
	}

	$(document).ready(function() {
		reloadComments();
		setProfile();

		setInterval(reloadComments, 15000);

		$("#gallery").flickity({
			cellAlign: "left",
			contain: true
		});

		updateGoodCount();
	});

</script>

<script type="text/javascript">

	// emscripten Module
	var Module = {
		
		preRun: [],
		postRun: [],
		print:  (function() {
			return function(text) {
				text = Array.prototype.slice.call(arguments).join(' ');
				console.log(text);
			};
		})(),
		printErr: function(text) {
			text = Array.prototype.slice.call(arguments).join(' ');
			console.error(text);
			//assertBottom("error", "HSPエラー:"+text)
		},
		canvas: document.getElementById('screen'),
		setStatus: function(text){
			console.log(text);
		},
		totalDependencies: 0,
		monitorRunDependencies: function(){},
		arguments: ["/startax"]
	};
	console.log('ダウンロード中...');
	
	var Module;
	if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
	if (!Module.expectedDataFileDownloads) {
		Module.expectedDataFileDownloads = 0;
		Module.finishedDataFileDownloads = 0;
	}
	Module.expectedDataFileDownloads++;


	// データの登録
	function DataRequest(audio) {
		this.audio = audio;
	}

	DataRequest.prototype = {
		//TOTAL_MEMORY: 104857600,
		requests: {},
		//heapPtr: 0,
		//heapSize: 0,
		//heapSeek: 0,
		register: function(name, arrayBuffer) {
			this.name = name;

			this.arrayBuffer = arrayBuffer;

			//DataRequest.prototype.heapSize += arrayBuffer.byteLength;

			DataRequest.prototype.requests[name] = this;

			console.log("Registered "+this.name+" heapSize:"+DataRequest.prototype.heapSize);

			Module['addRunDependency']('fp ' + this.name);
		},
		process: function() {
			//if (!DataRequest.prototype.isAllocated) {

			//	DataRequest.prototype.heapPtr = Module['_malloc'](DataRequest.prototype.heapSize);

			//	DataRequest.prototype.isAllocated = true;
			//}
			//console.log("Processing "+this.name+" heapSeek:"+DataRequest.prototype.heapSeek+" length:"+this.arrayBuffer.byteLength);

			//Module['HEAPU8'].set(new Uint8Array(this.arrayBuffer), DataRequest.prototype.heapPtr+DataRequest.prototype.heapSeek);
			//var byteArray = Module['HEAPU8'].subarray(DataRequest.prototype.heapPtr+DataRequest.prototype.heapSeek, DataRequest.prototype.heapPtr+DataRequest.prototype.heapSeek+this.arrayBuffer.byteLength)

			var sourceBytes = new Uint8Array(this.arrayBuffer);

			var heapPtr = Module['_malloc'](sourceBytes.length);
			Module['HEAPU8'].set(sourceBytes, heapPtr);

			var byteArray = Module['HEAPU8'].subarray(heapPtr, heapPtr + this.arrayBuffer.byteLength);

			//DataRequest.prototype.heapSeek += this.arrayBuffer.byteLength;

			var that = this;
			Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
				Module['removeRunDependency']('fp ' + that.name);
			}, function() {
				if (that.audio) {
					Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
				} else {
					Module.printErr('Preloading file ' + that.name + ' failed');
				}
			}, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
		},
	};

	
	// ダウンロードするリスト
	var fileNames = ["startax"];
	
	function importDataList() {
		var defer = $.Deferred();
	
		$.ajax({
			type: "GET",
			url:  "/api/program/data_list/",
			data: {
				"p": {{ .ProgramInfo.Id }}
			},
			dataType: "json"
		}).success(function(data) {

			if (data.Names != null) {
				fileNames = fileNames.concat(data.Names);
			}

			console.log("Downloaded file list.");
	
			defer.resolve();
		}).error(function(data) {
			console.log("Failed to download file list.")
	
			defer.reject();
		});
	
		return defer.promise();
	}
	
	function importDataArray(name) {
		var defer = $.Deferred();
	
		var xhr = new XMLHttpRequest();
		xhr.open('GET', '/api/program/data/?pid={{ .ProgramInfo.Id }}&f=' + name, true);
		xhr.responseType = 'arraybuffer';
		
		xhr.onload = function(e) {
			if (this.status == 200) {
				new DataRequest(0).register("/" + name, this.response);
	
				console.log("Downloaded " + name);
	
				defer.resolve();
			} else {
				defer.reject();
			}
	
		};
		
		xhr.send();
	
		return defer.promise();
	}
	
	function importDataArrays() {
		var defer = $.Deferred();
		var processingNum = fileNames.length;
	
		for (var name of fileNames) {
			importDataArray(name).then(function () {
				processingNum--;
				if (processingNum == 0) {
					defer.resolve();
				}
			}, function () {
				defer.reject();
			});
		}
	
		return defer.promise();
	}

	// この時点で初期化されていれば、runWithFS
	// されていなければpreRunに追加
	if (Module['calledRun']) {
		runWithFS();
	} else {
		if (!Module['preRun']) Module['preRun'] = [];
		Module["preRun"].push(runWithFS);
	}
	
	
	// 初期化後の読み込み
	function runWithFS() {

		// HSPの設定
		Module.preRun.push(function() {
			ENV.HSP_WX = "640";//スクリプトの動作解像度
			ENV.HSP_WY = "480";
			ENV.HSP_SX = "640";//表示解像度
			ENV.HSP_SY = "480";
			ENV.HSP_AUTOSCALE = "0";//スケーリングモード
			ENV.HSP_FPS = "0";//フレームレート
			ENV.HSP_LIMIT_STEP = "5000";//ブラウザに処理を返すまでの実行ステップ数
		});
		
		function processPackageData() {
			console.log('Processing package data...')
	
			Module.finishedDataFileDownloads++;
	
			for (var name of fileNames) {
				DataRequest.prototype.requests["/" + name].process();
				DataRequest.prototype.requests["/" + name] = null;
			}
	
			Module['removeRunDependency']('datafile_data');
	
		};
	
		
		Module['addRunDependency']('datafile_data');
	
		if (!Module.preloadResults) Module.preloadResults = {};
	
		Module.preloadResults["data"] = {fromCache: false};
	
		importDataList().then(function() {
			importDataArrays().then(function () {

				processPackageData();

			});
		});
	
	}
	
</script>

{{ linkJS "hsp3dish.js" }}

{{ end }}
